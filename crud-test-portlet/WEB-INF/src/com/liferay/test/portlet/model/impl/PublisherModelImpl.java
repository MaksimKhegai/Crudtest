/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.test.portlet.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.liferay.test.portlet.model.Publisher;
import com.liferay.test.portlet.model.PublisherModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Publisher service. Represents a row in the &quot;TB_Publisher&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.test.portlet.model.PublisherModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PublisherImpl}.
 * </p>
 *
 * @author kmv
 * @see PublisherImpl
 * @see com.liferay.test.portlet.model.Publisher
 * @see com.liferay.test.portlet.model.PublisherModel
 * @generated
 */
public class PublisherModelImpl extends BaseModelImpl<Publisher>
	implements PublisherModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a publisher model instance should use the {@link com.liferay.test.portlet.model.Publisher} interface instead.
	 */
	public static final String TABLE_NAME = "TB_Publisher";
	public static final Object[][] TABLE_COLUMNS = {
			{ "publisherId", Types.BIGINT },
			{ "name", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table TB_Publisher (publisherId LONG not null primary key,name VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table TB_Publisher";
	public static final String ORDER_BY_JPQL = " ORDER BY publisher.publisherId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY TB_Publisher.publisherId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.test.portlet.model.Publisher"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.test.portlet.model.Publisher"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.test.portlet.model.Publisher"));

	public PublisherModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _publisherId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPublisherId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _publisherId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Publisher.class;
	}

	@Override
	public String getModelClassName() {
		return Publisher.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("publisherId", getPublisherId());
		attributes.put("name", getName());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long publisherId = (Long)attributes.get("publisherId");

		if (publisherId != null) {
			setPublisherId(publisherId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}
	}

	@Override
	public long getPublisherId() {
		return _publisherId;
	}

	@Override
	public void setPublisherId(long publisherId) {
		_publisherId = publisherId;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Publisher.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Publisher toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Publisher)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PublisherImpl publisherImpl = new PublisherImpl();

		publisherImpl.setPublisherId(getPublisherId());
		publisherImpl.setName(getName());

		publisherImpl.resetOriginalValues();

		return publisherImpl;
	}

	@Override
	public int compareTo(Publisher publisher) {
		long primaryKey = publisher.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Publisher)) {
			return false;
		}

		Publisher publisher = (Publisher)obj;

		long primaryKey = publisher.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Publisher> toCacheModel() {
		PublisherCacheModel publisherCacheModel = new PublisherCacheModel();

		publisherCacheModel.publisherId = getPublisherId();

		publisherCacheModel.name = getName();

		String name = publisherCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			publisherCacheModel.name = null;
		}

		return publisherCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{publisherId=");
		sb.append(getPublisherId());
		sb.append(", name=");
		sb.append(getName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("com.liferay.test.portlet.model.Publisher");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>publisherId</column-name><column-value><![CDATA[");
		sb.append(getPublisherId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Publisher.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Publisher.class
		};
	private long _publisherId;
	private String _name;
	private Publisher _escapedModel;
}